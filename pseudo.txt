AIMING FOR EASY STUFF FIRST, THEN ADD HARD STUFF LATER IF NECCESSARY

COMPLETE IMPORTANT FIRST, THEN WORK ON DESIGNING LATER

--- front end ---

1. homepage
    - how to play
        - steps to play ✔️
        - how to join portal ✔️
        - how to win ✔️
    - create a portal  !!
    - join portal !!
    - put in username 

2. lobby (waiting for players)
    - generated code (able to copy) !!
        - if easier, provide a link
    - players icon when joined !!
        - name showing or emojis
    - allows game settings
        - drawing time
    - start game button

3. game room
    - showing all players !!
        - username
        - icon
        - current points
    - drawing board !!!
    - guess box !!
        - chat box || something cuter
    - exit button

4. drawing board !!!!
    - changing colors of pencil
    - once over 
        - showing scores
        - showing what word it was
5. guess box 
    - could make it a chat box
     - when guessed correctly, word is green

6. API fetch request !!! ✔️



--- backend ---

1. database !!!
    - words ✔️
        - word points ✔️
        - difficulty level (add later)
    - users
        - store scores
        - username
        
2. model  !!!
    - word ✔️
    - users 
        - user validation
            - username requirements
            - no profanity (add later)
        - highscore validation
            - 0 when created
            - then keep updating

3. routes !!!
    - API ✔️
        - post ✔️
            - update data 
        - get ✔️
            - retrieving data
    - users
    - homepage ✔️
    - lobby ✔️
        - portal code || link to join
        - game settings
    - gameroom ✔️

4. functionality 
    - function get random words for users
    - points added for right answwers
    - timer for drawing
    - pencil settings
    - allow game customization (maybe later)
    - pulling scores from database 
        - display in gameroom
        - keep adding point
        - keep updating every game until quit
    - session storage
        - stores their current game room link?
    - room name validation
        - make sure there's not 2 of the same room name
        - alert user to pick a new name
        - write code in database to keep that from happening
    - allow users to create their own room name || have the room name randomly generated
5. scripts
    1. homepage !!
        - store username once input (session storage)
        - join a portal once input code

    2. lobby (websocket.io) !!!
        - function to share portal code 
        - show players icons and name once join
            - pull from database after input form
        - drawing time setting/guessing time
    
    3. game room 
        - pull from database to get scores !!!
            - current should be 0
            - keep updating score after every word guessed right
            - session storage
        - drawing board !!! 
            - p5.js
                - allows continuous line on mouse click
                - allows different colors for pencil
                - allows clear board option || eraser
                    - whichever is easier
            - be able to show drawing in real time to other players !!
                - implement websocket here
            - only the drawer can see the word !!
        - chat box || guess box !!! 
            - once word is guess, show green   !!
                - only guesser can see the correct answer once guessed !!
        - once over !!!
            - show points accumlated during this game !!
            - updating the user data with new points
            - once updated pull from database and display new score
            - show the word
            

--- FOLDER ORGANIZATION ---

1. config - connection.js
2. controlers - all of the routes to our website
3. db - schema.sql
4. models - user and words
5. public/css - frontend.js & css
6. seeds - getRandomWord.js && seed (to connect to DB) && words.json (all words)
7. views - store all of our html uses handlebars
            

make a post request, grab dta from frontend and goes to body of that req and send it to the backend and backend will insert into database
            
---Rooms---
1. have all rooms available on the homepage
2. private and public room
    - password (room validation)
    - validate the pasword n the frontend
3. session for the ROOM. last 1 day
4. attaching room-id to the user